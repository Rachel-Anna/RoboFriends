{"version":3,"sources":["reportWebVitals.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundaries.js","Containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","card","id","name","email","className","src","alt","CardList","CardArray","users","map","robot","Card","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","robots","fetch","response","json","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCOCQ,EAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MACrB,OACI,sBAAKC,UAAW,sDAAhB,UACI,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,gCACI,6BAAKJ,IACL,4BAAIC,WCaLI,EAlBE,SAAC,GAAa,IACrBC,EADoB,EAAXC,MACSC,KAAI,SAAAC,GACxB,OAAO,cAACC,EAAD,CAEHX,GAAIU,EAAMV,GACVC,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,OAHRQ,EAAMV,OAMnB,OACI,8BACKO,KCCEK,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCqBJC,G,wDAvBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,0DAEJG,KAAKX,MAAMK,a,GAhBEQ,cCkDbC,E,kDA5CX,aAAc,IAAD,8BACT,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAQ,CACTa,OAAQ,GACRH,YAAa,IAJR,E,gEAQQ,IAAD,OAChBI,MAAM,8CACL9C,MAAK,SAAA+C,GACF,OAAOA,EAASC,UAEnBhD,MAAK,SAAAe,GACF,EAAKsB,SAAS,CAACQ,OAAQ9B,S,+BAQtB,IAAD,EAC4BqB,KAAKJ,MAA7Ba,EADJ,EACIA,OAAQH,EADZ,EACYA,YACVO,EAAiBJ,EAAOK,QAAO,SAAAjC,GACjC,OAAOA,EAAMT,KAAK2C,cAAcC,SAASV,EAAYS,kBAEzD,OAAQN,EAAOQ,OAGX,sBAAK3C,UAAU,KAAf,UACK,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACG,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,MAAOkC,WAPjC,oBAAIvC,UAAW,KAAf,yB,GA7BU4B,aCClBgB,IAASC,OACP,8BACA,cAAC,EAAD,MAECC,SAASC,eAAe,SAM3B5D,M","file":"static/js/main.9d8e676e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\nconst card = ({id, name, email})=> {\r\n    return (\r\n        <div className =\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\"> \r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({users}) => {\r\n    const CardArray = users.map(robot => {\r\n        return <Card\r\n            key={robot.id}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            email={robot.email}\r\n        />\r\n    })\r\n    return (\r\n        <div>\r\n            {CardArray}\r\n        \r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">   \r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"Search Robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: \"scroll\", border: \"5px solid black\", height: \"800px\" }}>\r\n            {props.children} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;\r\n\r\n//you have to use camel case for JSX and css\r\n//props.children allows you to access children inside the scroll\r\n// i.e. the cards, see app.js\r\n\r\n//you dont have to pass the props in the Scroll component in the app.js because every component contains the props object by default\r\n// which, in turn, has the children property by default","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundary","import React, { Component } from \"react\";\r\nimport CardList from \"../Components/CardList\"; \r\nimport SearchBox from \"../Components/SearchBox\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport \"./App.css\";\r\nimport ErrorBoundary from \"../Components/ErrorBoundaries\";\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response=> {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({robots: users})\r\n        })\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        const { robots, searchField } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return !robots.length ?\r\n        <h1 className =\"tc\">Loading</h1> :\r\n        (\r\n            <div className=\"tc\">\r\n                 <h1 className=\"f2\">RoboFriends</h1>\r\n                 <SearchBox searchChange={this.onSearchChange}/>\r\n                 <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList users={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                 </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n//order:\r\n//constructor, render, componentDidMount, render","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport \"tachyons\";\nimport App from \"./Containers/App\";\n\n\nReactDOM.render(\n  <div>\n  <App />\n  </div>\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}